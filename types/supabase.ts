/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

 export interface paths {
    "/": {
      get: {
        responses: {
          /** OK */
          200: unknown;
        };
      };
    };
    "/attachments": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.attachments.id"];
            request_id?: parameters["rowFilter.attachments.request_id"];
            user_id?: parameters["rowFilter.attachments.user_id"];
            url?: parameters["rowFilter.attachments.url"];
            mime?: parameters["rowFilter.attachments.mime"];
            label?: parameters["rowFilter.attachments.label"];
            pages?: parameters["rowFilter.attachments.pages"];
            created_at?: parameters["rowFilter.attachments.created_at"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["attachments"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** attachments */
            attachments?: definitions["attachments"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.attachments.id"];
            request_id?: parameters["rowFilter.attachments.request_id"];
            user_id?: parameters["rowFilter.attachments.user_id"];
            url?: parameters["rowFilter.attachments.url"];
            mime?: parameters["rowFilter.attachments.mime"];
            label?: parameters["rowFilter.attachments.label"];
            pages?: parameters["rowFilter.attachments.pages"];
            created_at?: parameters["rowFilter.attachments.created_at"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.attachments.id"];
            request_id?: parameters["rowFilter.attachments.request_id"];
            user_id?: parameters["rowFilter.attachments.user_id"];
            url?: parameters["rowFilter.attachments.url"];
            mime?: parameters["rowFilter.attachments.mime"];
            label?: parameters["rowFilter.attachments.label"];
            pages?: parameters["rowFilter.attachments.pages"];
            created_at?: parameters["rowFilter.attachments.created_at"];
          };
          body: {
            /** attachments */
            attachments?: definitions["attachments"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/featured_images": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.featured_images.id"];
            user_id?: parameters["rowFilter.featured_images.user_id"];
            url?: parameters["rowFilter.featured_images.url"];
            label?: parameters["rowFilter.featured_images.label"];
            created_at?: parameters["rowFilter.featured_images.created_at"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["featured_images"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** featured_images */
            featured_images?: definitions["featured_images"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.featured_images.id"];
            user_id?: parameters["rowFilter.featured_images.user_id"];
            url?: parameters["rowFilter.featured_images.url"];
            label?: parameters["rowFilter.featured_images.label"];
            created_at?: parameters["rowFilter.featured_images.created_at"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.featured_images.id"];
            user_id?: parameters["rowFilter.featured_images.user_id"];
            url?: parameters["rowFilter.featured_images.url"];
            label?: parameters["rowFilter.featured_images.label"];
            created_at?: parameters["rowFilter.featured_images.created_at"];
          };
          body: {
            /** featured_images */
            featured_images?: definitions["featured_images"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/organization_users": {
      get: {
        parameters: {
          query: {
            organization_id?: parameters["rowFilter.organization_users.organization_id"];
            user_id?: parameters["rowFilter.organization_users.user_id"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["organization_users"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** organization_users */
            organization_users?: definitions["organization_users"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            organization_id?: parameters["rowFilter.organization_users.organization_id"];
            user_id?: parameters["rowFilter.organization_users.user_id"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            organization_id?: parameters["rowFilter.organization_users.organization_id"];
            user_id?: parameters["rowFilter.organization_users.user_id"];
          };
          body: {
            /** organization_users */
            organization_users?: definitions["organization_users"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/organizations": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.organizations.id"];
            address?: parameters["rowFilter.organizations.address"];
            name?: parameters["rowFilter.organizations.name"];
            slug?: parameters["rowFilter.organizations.slug"];
            created_at?: parameters["rowFilter.organizations.created_at"];
            owner_id?: parameters["rowFilter.organizations.owner_id"];
            featured_image_id?: parameters["rowFilter.organizations.featured_image_id"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["organizations"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** organizations */
            organizations?: definitions["organizations"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.organizations.id"];
            address?: parameters["rowFilter.organizations.address"];
            name?: parameters["rowFilter.organizations.name"];
            slug?: parameters["rowFilter.organizations.slug"];
            created_at?: parameters["rowFilter.organizations.created_at"];
            owner_id?: parameters["rowFilter.organizations.owner_id"];
            featured_image_id?: parameters["rowFilter.organizations.featured_image_id"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.organizations.id"];
            address?: parameters["rowFilter.organizations.address"];
            name?: parameters["rowFilter.organizations.name"];
            slug?: parameters["rowFilter.organizations.slug"];
            created_at?: parameters["rowFilter.organizations.created_at"];
            owner_id?: parameters["rowFilter.organizations.owner_id"];
            featured_image_id?: parameters["rowFilter.organizations.featured_image_id"];
          };
          body: {
            /** organizations */
            organizations?: definitions["organizations"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/payment_associations": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.payment_associations.id"];
            created_at?: parameters["rowFilter.payment_associations.created_at"];
            stripe_access_token?: parameters["rowFilter.payment_associations.stripe_access_token"];
            stripe_livemode?: parameters["rowFilter.payment_associations.stripe_livemode"];
            stripe_refresh_token?: parameters["rowFilter.payment_associations.stripe_refresh_token"];
            stripe_scope?: parameters["rowFilter.payment_associations.stripe_scope"];
            stripe_publishable_key?: parameters["rowFilter.payment_associations.stripe_publishable_key"];
            stripe_user_id?: parameters["rowFilter.payment_associations.stripe_user_id"];
            stripe_token_type?: parameters["rowFilter.payment_associations.stripe_token_type"];
            stripe_customer_id?: parameters["rowFilter.payment_associations.stripe_customer_id"];
            user_id?: parameters["rowFilter.payment_associations.user_id"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["payment_associations"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** payment_associations */
            payment_associations?: definitions["payment_associations"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.payment_associations.id"];
            created_at?: parameters["rowFilter.payment_associations.created_at"];
            stripe_access_token?: parameters["rowFilter.payment_associations.stripe_access_token"];
            stripe_livemode?: parameters["rowFilter.payment_associations.stripe_livemode"];
            stripe_refresh_token?: parameters["rowFilter.payment_associations.stripe_refresh_token"];
            stripe_scope?: parameters["rowFilter.payment_associations.stripe_scope"];
            stripe_publishable_key?: parameters["rowFilter.payment_associations.stripe_publishable_key"];
            stripe_user_id?: parameters["rowFilter.payment_associations.stripe_user_id"];
            stripe_token_type?: parameters["rowFilter.payment_associations.stripe_token_type"];
            stripe_customer_id?: parameters["rowFilter.payment_associations.stripe_customer_id"];
            user_id?: parameters["rowFilter.payment_associations.user_id"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.payment_associations.id"];
            created_at?: parameters["rowFilter.payment_associations.created_at"];
            stripe_access_token?: parameters["rowFilter.payment_associations.stripe_access_token"];
            stripe_livemode?: parameters["rowFilter.payment_associations.stripe_livemode"];
            stripe_refresh_token?: parameters["rowFilter.payment_associations.stripe_refresh_token"];
            stripe_scope?: parameters["rowFilter.payment_associations.stripe_scope"];
            stripe_publishable_key?: parameters["rowFilter.payment_associations.stripe_publishable_key"];
            stripe_user_id?: parameters["rowFilter.payment_associations.stripe_user_id"];
            stripe_token_type?: parameters["rowFilter.payment_associations.stripe_token_type"];
            stripe_customer_id?: parameters["rowFilter.payment_associations.stripe_customer_id"];
            user_id?: parameters["rowFilter.payment_associations.user_id"];
          };
          body: {
            /** payment_associations */
            payment_associations?: definitions["payment_associations"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/pricing_summaries": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.pricing_summaries.id"];
            request_id?: parameters["rowFilter.pricing_summaries.request_id"];
            base_fee?: parameters["rowFilter.pricing_summaries.base_fee"];
            service_fee?: parameters["rowFilter.pricing_summaries.service_fee"];
            total?: parameters["rowFilter.pricing_summaries.total"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["pricing_summaries"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** pricing_summaries */
            pricing_summaries?: definitions["pricing_summaries"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.pricing_summaries.id"];
            request_id?: parameters["rowFilter.pricing_summaries.request_id"];
            base_fee?: parameters["rowFilter.pricing_summaries.base_fee"];
            service_fee?: parameters["rowFilter.pricing_summaries.service_fee"];
            total?: parameters["rowFilter.pricing_summaries.total"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.pricing_summaries.id"];
            request_id?: parameters["rowFilter.pricing_summaries.request_id"];
            base_fee?: parameters["rowFilter.pricing_summaries.base_fee"];
            service_fee?: parameters["rowFilter.pricing_summaries.service_fee"];
            total?: parameters["rowFilter.pricing_summaries.total"];
          };
          body: {
            /** pricing_summaries */
            pricing_summaries?: definitions["pricing_summaries"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/repositories": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.repositories.id"];
            name?: parameters["rowFilter.repositories.name"];
            address1?: parameters["rowFilter.repositories.address1"];
            address2?: parameters["rowFilter.repositories.address2"];
            city?: parameters["rowFilter.repositories.city"];
            state?: parameters["rowFilter.repositories.state"];
            postal_code?: parameters["rowFilter.repositories.postal_code"];
            country_code?: parameters["rowFilter.repositories.country_code"];
            geography?: parameters["rowFilter.repositories.geography"];
            active?: parameters["rowFilter.repositories.active"];
            created_at?: parameters["rowFilter.repositories.created_at"];
            organization_id?: parameters["rowFilter.repositories.organization_id"];
            featured_image_id?: parameters["rowFilter.repositories.featured_image_id"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["repositories"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** repositories */
            repositories?: definitions["repositories"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.repositories.id"];
            name?: parameters["rowFilter.repositories.name"];
            address1?: parameters["rowFilter.repositories.address1"];
            address2?: parameters["rowFilter.repositories.address2"];
            city?: parameters["rowFilter.repositories.city"];
            state?: parameters["rowFilter.repositories.state"];
            postal_code?: parameters["rowFilter.repositories.postal_code"];
            country_code?: parameters["rowFilter.repositories.country_code"];
            geography?: parameters["rowFilter.repositories.geography"];
            active?: parameters["rowFilter.repositories.active"];
            created_at?: parameters["rowFilter.repositories.created_at"];
            organization_id?: parameters["rowFilter.repositories.organization_id"];
            featured_image_id?: parameters["rowFilter.repositories.featured_image_id"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.repositories.id"];
            name?: parameters["rowFilter.repositories.name"];
            address1?: parameters["rowFilter.repositories.address1"];
            address2?: parameters["rowFilter.repositories.address2"];
            city?: parameters["rowFilter.repositories.city"];
            state?: parameters["rowFilter.repositories.state"];
            postal_code?: parameters["rowFilter.repositories.postal_code"];
            country_code?: parameters["rowFilter.repositories.country_code"];
            geography?: parameters["rowFilter.repositories.geography"];
            active?: parameters["rowFilter.repositories.active"];
            created_at?: parameters["rowFilter.repositories.created_at"];
            organization_id?: parameters["rowFilter.repositories.organization_id"];
            featured_image_id?: parameters["rowFilter.repositories.featured_image_id"];
          };
          body: {
            /** repositories */
            repositories?: definitions["repositories"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/request_clients": {
      get: {
        parameters: {
          query: {
            request_id?: parameters["rowFilter.request_clients.request_id"];
            label?: parameters["rowFilter.request_clients.label"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["request_clients"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** request_clients */
            request_clients?: definitions["request_clients"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            request_id?: parameters["rowFilter.request_clients.request_id"];
            label?: parameters["rowFilter.request_clients.label"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            request_id?: parameters["rowFilter.request_clients.request_id"];
            label?: parameters["rowFilter.request_clients.label"];
          };
          body: {
            /** request_clients */
            request_clients?: definitions["request_clients"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/request_comments": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.request_comments.id"];
            user_id?: parameters["rowFilter.request_comments.user_id"];
            request_id?: parameters["rowFilter.request_comments.request_id"];
            content?: parameters["rowFilter.request_comments.content"];
            created_at?: parameters["rowFilter.request_comments.created_at"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["request_comments"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** request_comments */
            request_comments?: definitions["request_comments"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.request_comments.id"];
            user_id?: parameters["rowFilter.request_comments.user_id"];
            request_id?: parameters["rowFilter.request_comments.request_id"];
            content?: parameters["rowFilter.request_comments.content"];
            created_at?: parameters["rowFilter.request_comments.created_at"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.request_comments.id"];
            user_id?: parameters["rowFilter.request_comments.user_id"];
            request_id?: parameters["rowFilter.request_comments.request_id"];
            content?: parameters["rowFilter.request_comments.content"];
            created_at?: parameters["rowFilter.request_comments.created_at"];
          };
          body: {
            /** request_comments */
            request_comments?: definitions["request_comments"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/request_events": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.request_events.id"];
            request_id?: parameters["rowFilter.request_events.request_id"];
            user_id?: parameters["rowFilter.request_events.user_id"];
            status_id?: parameters["rowFilter.request_events.status_id"];
            description?: parameters["rowFilter.request_events.description"];
            created_at?: parameters["rowFilter.request_events.created_at"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["request_events"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** request_events */
            request_events?: definitions["request_events"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.request_events.id"];
            request_id?: parameters["rowFilter.request_events.request_id"];
            user_id?: parameters["rowFilter.request_events.user_id"];
            status_id?: parameters["rowFilter.request_events.status_id"];
            description?: parameters["rowFilter.request_events.description"];
            created_at?: parameters["rowFilter.request_events.created_at"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.request_events.id"];
            request_id?: parameters["rowFilter.request_events.request_id"];
            user_id?: parameters["rowFilter.request_events.user_id"];
            status_id?: parameters["rowFilter.request_events.status_id"];
            description?: parameters["rowFilter.request_events.description"];
            created_at?: parameters["rowFilter.request_events.created_at"];
          };
          body: {
            /** request_events */
            request_events?: definitions["request_events"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/request_vendors": {
      get: {
        parameters: {
          query: {
            request_id?: parameters["rowFilter.request_vendors.request_id"];
            label?: parameters["rowFilter.request_vendors.label"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["request_vendors"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** request_vendors */
            request_vendors?: definitions["request_vendors"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            request_id?: parameters["rowFilter.request_vendors.request_id"];
            label?: parameters["rowFilter.request_vendors.label"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            request_id?: parameters["rowFilter.request_vendors.request_id"];
            label?: parameters["rowFilter.request_vendors.label"];
          };
          body: {
            /** request_vendors */
            request_vendors?: definitions["request_vendors"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/requests": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.requests.id"];
            created_at?: parameters["rowFilter.requests.created_at"];
            updated_at?: parameters["rowFilter.requests.updated_at"];
            repository_id?: parameters["rowFilter.requests.repository_id"];
            citation?: parameters["rowFilter.requests.citation"];
            pages?: parameters["rowFilter.requests.pages"];
            status_id?: parameters["rowFilter.requests.status_id"];
            user_id?: parameters["rowFilter.requests.user_id"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["requests"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** requests */
            requests?: definitions["requests"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.requests.id"];
            created_at?: parameters["rowFilter.requests.created_at"];
            updated_at?: parameters["rowFilter.requests.updated_at"];
            repository_id?: parameters["rowFilter.requests.repository_id"];
            citation?: parameters["rowFilter.requests.citation"];
            pages?: parameters["rowFilter.requests.pages"];
            status_id?: parameters["rowFilter.requests.status_id"];
            user_id?: parameters["rowFilter.requests.user_id"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.requests.id"];
            created_at?: parameters["rowFilter.requests.created_at"];
            updated_at?: parameters["rowFilter.requests.updated_at"];
            repository_id?: parameters["rowFilter.requests.repository_id"];
            citation?: parameters["rowFilter.requests.citation"];
            pages?: parameters["rowFilter.requests.pages"];
            status_id?: parameters["rowFilter.requests.status_id"];
            user_id?: parameters["rowFilter.requests.user_id"];
          };
          body: {
            /** requests */
            requests?: definitions["requests"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/status": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.status.id"];
            name?: parameters["rowFilter.status.name"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["status"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** status */
            status?: definitions["status"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.status.id"];
            name?: parameters["rowFilter.status.name"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.status.id"];
            name?: parameters["rowFilter.status.name"];
          };
          body: {
            /** status */
            status?: definitions["status"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/user": {
      get: {
        parameters: {
          query: {
            id?: parameters["rowFilter.user.id"];
            email?: parameters["rowFilter.user.email"];
            /** User's display name. */
            name?: parameters["rowFilter.user.name"];
            created_at?: parameters["rowFilter.user.created_at"];
            /** Filtering Columns */
            select?: parameters["select"];
            /** Ordering */
            order?: parameters["order"];
            /** Limiting and Pagination */
            offset?: parameters["offset"];
            /** Limiting and Pagination */
            limit?: parameters["limit"];
          };
          header: {
            /** Limiting and Pagination */
            Range?: parameters["range"];
            /** Limiting and Pagination */
            "Range-Unit"?: parameters["rangeUnit"];
            /** Preference */
            Prefer?: parameters["preferCount"];
          };
        };
        responses: {
          /** OK */
          200: {
            schema: definitions["user"][];
          };
          /** Partial Content */
          206: unknown;
        };
      };
      post: {
        parameters: {
          body: {
            /** user */
            user?: definitions["user"];
          };
          query: {
            /** Filtering Columns */
            select?: parameters["select"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** Created */
          201: unknown;
        };
      };
      delete: {
        parameters: {
          query: {
            id?: parameters["rowFilter.user.id"];
            email?: parameters["rowFilter.user.email"];
            /** User's display name. */
            name?: parameters["rowFilter.user.name"];
            created_at?: parameters["rowFilter.user.created_at"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
      patch: {
        parameters: {
          query: {
            id?: parameters["rowFilter.user.id"];
            email?: parameters["rowFilter.user.email"];
            /** User's display name. */
            name?: parameters["rowFilter.user.name"];
            created_at?: parameters["rowFilter.user.created_at"];
          };
          body: {
            /** user */
            user?: definitions["user"];
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferReturn"];
          };
        };
        responses: {
          /** No Content */
          204: never;
        };
      };
    };
    "/rpc/create_request_clients_vendors": {
      post: {
        parameters: {
          body: {
            args: { [key: string]: unknown };
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferParams"];
          };
        };
        responses: {
          /** OK */
          200: unknown;
        };
      };
    };
    "/rpc/create_pricing_summary_on_request": {
      post: {
        parameters: {
          body: {
            args: { [key: string]: unknown };
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferParams"];
          };
        };
        responses: {
          /** OK */
          200: unknown;
        };
      };
    };
    "/rpc/create_user": {
      post: {
        parameters: {
          body: {
            args: { [key: string]: unknown };
          };
          header: {
            /** Preference */
            Prefer?: parameters["preferParams"];
          };
        };
        responses: {
          /** OK */
          200: unknown;
        };
      };
    };
  }
  
  export interface definitions {
    attachments: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `requests.id`.<fk table='requests' column='id'/>
       */
      request_id?: number;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id?: string;
      /** Format: text */
      url?: string;
      /** Format: text */
      mime?: string;
      /** Format: text */
      label?: string;
      /** Format: integer */
      pages?: number;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
    };
    featured_images: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id?: string;
      /** Format: text */
      url?: string;
      /** Format: text */
      label?: string;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
    };
    organization_users: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
       */
      organization_id: number;
      /**
       * Format: uuid
       * @description Note:
       * This is a Primary Key.<pk/>
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id: string;
    };
    organizations: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /** Format: text */
      address?: string;
      /** Format: text */
      name?: string;
      /** Format: text */
      slug?: string;
      /**
       * Format: timestamp with time zone
       * @default (now() AT TIME ZONE 'utc'::text)
       */
      created_at: string;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      owner_id?: string;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `featured_images.id`.<fk table='featured_images' column='id'/>
       */
      featured_image_id?: number;
    };
    payment_associations: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
      /** Format: character varying */
      stripe_access_token?: string;
      /** Format: boolean */
      stripe_livemode?: boolean;
      /** Format: character varying */
      stripe_refresh_token?: string;
      /** Format: character varying */
      stripe_scope?: string;
      /** Format: character varying */
      stripe_publishable_key?: string;
      /** Format: character varying */
      stripe_user_id?: string;
      /** Format: character varying */
      stripe_token_type?: string;
      /** Format: character varying */
      stripe_customer_id?: string;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id?: string;
    };
    pricing_summaries: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `requests.id`.<fk table='requests' column='id'/>
       */
      request_id?: number;
      /** Format: bigint */
      base_fee?: number;
      /** Format: bigint */
      service_fee?: number;
      /** Format: bigint */
      total?: number;
    };
    repositories: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /** Format: text */
      name?: string;
      /** Format: text */
      address1?: string;
      /** Format: text */
      address2?: string;
      /** Format: text */
      city?: string;
      /** Format: text */
      state?: string;
      /** Format: text */
      postal_code?: string;
      /** Format: text */
      country_code?: string;
      /** Format: extensions.geography */
      geography?: string;
      /** Format: boolean */
      active?: boolean;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `organizations.id`.<fk table='organizations' column='id'/>
       */
      organization_id?: number;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `featured_images.id`.<fk table='featured_images' column='id'/>
       */
      featured_image_id?: number;
    };
    request_clients: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       * This is a Foreign Key to `requests.id`.<fk table='requests' column='id'/>
       */
      request_id: number;
      /** Format: text */
      label?: string;
    };
    request_comments: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id?: string;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `requests.id`.<fk table='requests' column='id'/>
       */
      request_id?: number;
      /** Format: text */
      content?: string;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
    };
    request_events: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `requests.id`.<fk table='requests' column='id'/>
       */
      request_id?: number;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id?: string;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `status.id`.<fk table='status' column='id'/>
       */
      status_id?: number;
      /** Format: text */
      description?: string;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
    };
    request_vendors: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       * This is a Foreign Key to `requests.id`.<fk table='requests' column='id'/>
       */
      request_id: number;
      /** Format: text */
      label?: string;
    };
    requests: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      updated_at: string;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `repositories.id`.<fk table='repositories' column='id'/>
       */
      repository_id?: number;
      /** Format: text */
      citation?: string;
      /** Format: integer */
      pages?: number;
      /**
       * Format: bigint
       * @description Note:
       * This is a Foreign Key to `status.id`.<fk table='status' column='id'/>
       */
      status_id?: number;
      /**
       * Format: uuid
       * @description Note:
       * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
       */
      user_id?: string;
    };
    status: {
      /**
       * Format: bigint
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: number;
      /** Format: text */
      name?: string;
    };
    user: {
      /**
       * Format: uuid
       * @description Note:
       * This is a Primary Key.<pk/>
       */
      id: string;
      /** Format: text */
      email?: string;
      /**
       * Format: character varying
       * @description User's display name.
       */
      name?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
  }
  
  export interface parameters {
    /**
     * @description Preference
     * @enum {string}
     */
    preferParams: "params=single-object";
    /**
     * @description Preference
     * @enum {string}
     */
    preferReturn: "return=representation" | "return=minimal" | "return=none";
    /**
     * @description Preference
     * @enum {string}
     */
    preferCount: "count=none";
    /** @description Filtering Columns */
    select: string;
    /** @description On Conflict */
    on_conflict: string;
    /** @description Ordering */
    order: string;
    /** @description Limiting and Pagination */
    range: string;
    /**
     * @description Limiting and Pagination
     * @default items
     */
    rangeUnit: string;
    /** @description Limiting and Pagination */
    offset: string;
    /** @description Limiting and Pagination */
    limit: string;
    /** @description attachments */
    "body.attachments": definitions["attachments"];
    /** Format: bigint */
    "rowFilter.attachments.id": string;
    /** Format: bigint */
    "rowFilter.attachments.request_id": string;
    /** Format: uuid */
    "rowFilter.attachments.user_id": string;
    /** Format: text */
    "rowFilter.attachments.url": string;
    /** Format: text */
    "rowFilter.attachments.mime": string;
    /** Format: text */
    "rowFilter.attachments.label": string;
    /** Format: integer */
    "rowFilter.attachments.pages": string;
    /** Format: timestamp with time zone */
    "rowFilter.attachments.created_at": string;
    /** @description featured_images */
    "body.featured_images": definitions["featured_images"];
    /** Format: bigint */
    "rowFilter.featured_images.id": string;
    /** Format: uuid */
    "rowFilter.featured_images.user_id": string;
    /** Format: text */
    "rowFilter.featured_images.url": string;
    /** Format: text */
    "rowFilter.featured_images.label": string;
    /** Format: timestamp with time zone */
    "rowFilter.featured_images.created_at": string;
    /** @description organization_users */
    "body.organization_users": definitions["organization_users"];
    /** Format: bigint */
    "rowFilter.organization_users.organization_id": string;
    /** Format: uuid */
    "rowFilter.organization_users.user_id": string;
    /** @description organizations */
    "body.organizations": definitions["organizations"];
    /** Format: bigint */
    "rowFilter.organizations.id": string;
    /** Format: text */
    "rowFilter.organizations.address": string;
    /** Format: text */
    "rowFilter.organizations.name": string;
    /** Format: text */
    "rowFilter.organizations.slug": string;
    /** Format: timestamp with time zone */
    "rowFilter.organizations.created_at": string;
    /** Format: uuid */
    "rowFilter.organizations.owner_id": string;
    /** Format: bigint */
    "rowFilter.organizations.featured_image_id": string;
    /** @description payment_associations */
    "body.payment_associations": definitions["payment_associations"];
    /** Format: bigint */
    "rowFilter.payment_associations.id": string;
    /** Format: timestamp with time zone */
    "rowFilter.payment_associations.created_at": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_access_token": string;
    /** Format: boolean */
    "rowFilter.payment_associations.stripe_livemode": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_refresh_token": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_scope": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_publishable_key": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_user_id": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_token_type": string;
    /** Format: character varying */
    "rowFilter.payment_associations.stripe_customer_id": string;
    /** Format: uuid */
    "rowFilter.payment_associations.user_id": string;
    /** @description pricing_summaries */
    "body.pricing_summaries": definitions["pricing_summaries"];
    /** Format: bigint */
    "rowFilter.pricing_summaries.id": string;
    /** Format: bigint */
    "rowFilter.pricing_summaries.request_id": string;
    /** Format: bigint */
    "rowFilter.pricing_summaries.base_fee": string;
    /** Format: bigint */
    "rowFilter.pricing_summaries.service_fee": string;
    /** Format: bigint */
    "rowFilter.pricing_summaries.total": string;
    /** @description repositories */
    "body.repositories": definitions["repositories"];
    /** Format: bigint */
    "rowFilter.repositories.id": string;
    /** Format: text */
    "rowFilter.repositories.name": string;
    /** Format: text */
    "rowFilter.repositories.address1": string;
    /** Format: text */
    "rowFilter.repositories.address2": string;
    /** Format: text */
    "rowFilter.repositories.city": string;
    /** Format: text */
    "rowFilter.repositories.state": string;
    /** Format: text */
    "rowFilter.repositories.postal_code": string;
    /** Format: text */
    "rowFilter.repositories.country_code": string;
    /** Format: extensions.geography */
    "rowFilter.repositories.geography": string;
    /** Format: boolean */
    "rowFilter.repositories.active": string;
    /** Format: timestamp with time zone */
    "rowFilter.repositories.created_at": string;
    /** Format: bigint */
    "rowFilter.repositories.organization_id": string;
    /** Format: bigint */
    "rowFilter.repositories.featured_image_id": string;
    /** @description request_clients */
    "body.request_clients": definitions["request_clients"];
    /** Format: bigint */
    "rowFilter.request_clients.request_id": string;
    /** Format: text */
    "rowFilter.request_clients.label": string;
    /** @description request_comments */
    "body.request_comments": definitions["request_comments"];
    /** Format: bigint */
    "rowFilter.request_comments.id": string;
    /** Format: uuid */
    "rowFilter.request_comments.user_id": string;
    /** Format: bigint */
    "rowFilter.request_comments.request_id": string;
    /** Format: text */
    "rowFilter.request_comments.content": string;
    /** Format: timestamp with time zone */
    "rowFilter.request_comments.created_at": string;
    /** @description request_events */
    "body.request_events": definitions["request_events"];
    /** Format: bigint */
    "rowFilter.request_events.id": string;
    /** Format: bigint */
    "rowFilter.request_events.request_id": string;
    /** Format: uuid */
    "rowFilter.request_events.user_id": string;
    /** Format: bigint */
    "rowFilter.request_events.status_id": string;
    /** Format: text */
    "rowFilter.request_events.description": string;
    /** Format: timestamp with time zone */
    "rowFilter.request_events.created_at": string;
    /** @description request_vendors */
    "body.request_vendors": definitions["request_vendors"];
    /** Format: bigint */
    "rowFilter.request_vendors.request_id": string;
    /** Format: text */
    "rowFilter.request_vendors.label": string;
    /** @description requests */
    "body.requests": definitions["requests"];
    /** Format: bigint */
    "rowFilter.requests.id": string;
    /** Format: timestamp with time zone */
    "rowFilter.requests.created_at": string;
    /** Format: timestamp with time zone */
    "rowFilter.requests.updated_at": string;
    /** Format: bigint */
    "rowFilter.requests.repository_id": string;
    /** Format: text */
    "rowFilter.requests.citation": string;
    /** Format: integer */
    "rowFilter.requests.pages": string;
    /** Format: bigint */
    "rowFilter.requests.status_id": string;
    /** Format: uuid */
    "rowFilter.requests.user_id": string;
    /** @description status */
    "body.status": definitions["status"];
    /** Format: bigint */
    "rowFilter.status.id": string;
    /** Format: text */
    "rowFilter.status.name": string;
    /** @description user */
    "body.user": definitions["user"];
    /** Format: uuid */
    "rowFilter.user.id": string;
    /** Format: text */
    "rowFilter.user.email": string;
    /**
     * Format: character varying
     * @description User's display name.
     */
    "rowFilter.user.name": string;
    /** Format: timestamp with time zone */
    "rowFilter.user.created_at": string;
  }
  
  export interface operations {}
  
  export interface external {}
  